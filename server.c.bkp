/* server.c */
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/socket.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <errno.h>
#define BUF_SIZE 500
#define ACCEPT_QUEUE_LEN 10
#define MSG_SIZE 12
#define RECV_BUFFER_SIZE 16
int main(int argc, char *argv[]) {

    struct addrinfo hints;
    struct addrinfo *result, *rp;
    int sfd, s, newsockfd;
    struct sockaddr_storage peer_addr;
    socklen_t peer_addr_len;
    ssize_t nread;
    char buf[BUF_SIZE];

    if (argc != 2) {
        fprintf(stderr, "Usage: %s port\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    memset(&hints, 0, sizeof(struct addrinfo));
    hints.ai_family = AF_INET;       /* Allow IPv4 */
    hints.ai_socktype = SOCK_STREAM; /* sequenced, reliable, two-way, connection-based byte  streams. */
    hints.ai_flags = 0;

    s = getaddrinfo(NULL, argv[1], &hints, &result);
    if (s != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(s));
        exit(EXIT_FAILURE);
    }
    /* getaddrinfo() returns a list of address structures.
       Try each address until we successfully bind(2).
       If socket(2) (or bind(2)) fails, we (close the socket
       and) try the next address. */

    for (rp = result; rp != NULL; rp = rp->ai_next) {
        sfd = socket(rp->ai_family, rp->ai_socktype, rp->ai_protocol);
        if (sfd == -1)
            continue;

        if (bind(sfd, rp->ai_addr, rp->ai_addrlen) == 0)
            break;                  /* Success */

        close(sfd);
    }

    if (rp == NULL) {               /* No address succeeded */
        fprintf(stderr, "Could not bind\n");
        exit(EXIT_FAILURE);
    }
    freeaddrinfo(result);           /* No longer needed */

    listen(sfd, ACCEPT_QUEUE_LEN);

    /*aceptar*/
    while (1){
	    char addressBuf[INET_ADDRSTRLEN];
	    struct sockaddr_in address;
	    socklen_t addressLength = (socklen_t) sizeof(address);

	    newsockfd = accept(sfd, (struct sockaddr *)&address,
	                           &addressLength);

	     if (newsockfd < 0) 
	          printf("ERROR on accept");
		inet_ntop(AF_INET, &(address.sin_addr), addressBuf, INET_ADDRSTRLEN);
	    printf("Se conectó un usuario: %s\n", addressBuf);

	    /** ENVIO DE MENSAJE DE SERVER A CLI
	     * MSG_NOSIGNAL para evitar que salte una señal en caso
	     * de que el socket se haya cerrado
	     */
    	static const char msg[] = "Hello client, I am server\n";
	    printf("Enviando %s\n", msg);
	    int bytes = send(newsockfd, msg, sizeof(msg) - 1, MSG_NOSIGNAL);
	    if (bytes < 0){
        	fprintf(stderr, "send: failed! %s\n", strerror(errno));
    	}
	    printf("Enviado %d bytes\n", bytes);


	    /* Recepcion msj unico */

	    // char buf[RECV_BUFFER_SIZE];
	    // // Voy a recibir "Hello server", 12 caracteres
	    // int bytes_rcv = recv(newsockfd, buf, MSG_SIZE, 0);
	    // buf[MSG_SIZE] = 0;
	    // printf("Recibido %d bytes: %s\n", bytes_rcv, buf);
	    // return 0;


	    /*Recepcion hasta que se llene buffer de N BYTES*/

	    char buf2[RECV_BUFFER_SIZE];
	    int bytes_rcv = 0;
	    while (bytes_rcv < RECV_BUFFER_SIZE){
			s = recv(newsockfd, &buf2[bytes_rcv], RECV_BUFFER_SIZE - bytes_rcv - 1,
			0);
			printf("recv_buffer_size: %d", RECV_BUFFER_SIZE);
			if (s == -1) { // Error inesperado, ver errno
			/* ... */
				fprintf(stderr, "send: failed! %s\n", strerror(errno));
			}
			else if (s == 0) { // Nos cerraron el socket
			/* ... */
				printf("Socket cerrado o no hay que leer");
				break;
			}
			else {
				bytes_rcv += s;
				printf("Se recibieron: %d bytes. Ahora se tienen bytes_rcv: %d\n", s, bytes_rcv);

			}
	    }
	    printf("HOLA\n");
	    printf("Recibido %d bytes, lo enviado fue: %s\n", bytes_rcv, buf2);


	    /*Cerrado*/
		if(shutdown(newsockfd, SHUT_RDWR) < 0) {
        	fprintf(stderr, "shutdown: failed! %s\n", strerror(errno));
        	exit(EXIT_FAILURE);
    	}
		if(close(newsockfd) < 0) {
        	fprintf(stderr, "close: failed! %s\n", strerror(errno));
        	exit(EXIT_FAILURE);
    	}
    	printf("Se desconecto al usuario!\n");
	}




    /*fin aceptar*/
    /* Read datagrams and echo them back to sender */

    // for (;;) {
    //     peer_addr_len = sizeof(struct sockaddr_storage);
    //     nread = recvfrom(
    //         sfd, buf, BUF_SIZE, 0, (struct sockaddr *) &peer_addr, &peer_addr_len
    //     );
    //     if (nread == -1)
    //             continue;               /* Ignore failed request */

    //     char host[NI_MAXHOST], service[NI_MAXSERV];

    //     s = getnameinfo(
    //         (struct sockaddr *) &peer_addr,
    //         peer_addr_len,
    //         host,
    //         NI_MAXHOST,
    //         service,
    //         NI_MAXSERV,
    //         NI_NUMERICSERV
    //     );
    //     if (s == 0)
    //         printf("Received %zd bytes from %s:%s\n", nread, host, service);
    //     else
    //         fprintf(stderr, "getnameinfo: %s\n", gai_strerror(s));

    //     if (
    //         sendto(
    //             sfd,
    //             buf,
    //             nread,
    //             0,
    //             (struct sockaddr *) &peer_addr,
    //             peer_addr_len
    //         ) != nread
    //     ) {
    //         fprintf(stderr, "Error sending response\n");
    //     }
    // }
}